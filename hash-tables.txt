1.What is a hash table?
Type of structure that stores values by linking it to a unique key. 

2.What is hashing?
The process of converting strings to an integer. 

3. How does a hash table store data?
Take the Key.
-Convert the Key to a Hash Code using a Hashing Function.
-Mod the Hash Code to get an Array Index.
-Store the Value in the Array Index.

4.How are hash tables and objects different?
Hash tables are like arrays in which you store similar data collections. 
Hash objects hold different types of data together. 


Determine whether you would use a hash table or an object to store each of the following pieces of data:
A list of pets and their unique names. - TABLE
The name, age, and the birthday of your best friend. - OBJECT
The name and location of every company in a given city. TABLE
All of the books checked out from a library by a particular individual. - TABLE
The primary and secondary phone numbers for a contact. - OBJECT



Programming Questions
Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.

function hash(key, size) {
  var hash = 0;
  for(var i = 0; i < key.length; i++){
    hash += key.charCodeAt(i);
  }
  return hash % size;  
};

function custLookUp (){
  var list = [];
  var cap = 321;
  
  this.set = function(number, name, address){
    var index = hash(number, cap);

    if (list[index] === undefined) {
      list[index] = [ [number, name, address] ];
    }
};
  
  this.get = function(number){
    var index = hash(number, cap);

    if(list[index] === undefined){
      return "The list of customers is empty";
    } else {
      for(var i = 0; i < list[index].length; i++) {
        if(list[index][i][0] === number) {
          return list[index][i][0] + ", " + list[index][i][1] + ", " + list[index][i][2];
        } else {
          return "Customer does not exist";
        }
      }
    }
  };
}

Create a hash table that allows a store owner to track their store's inventory and quantity.

function hash(key, size){
	var hash = 0;
	for(var i = 0; i < key.length; i++){
		hash += key.charCodeAt(i);
	}

	return hash % size;
}

function trackInventory(){
	var list = [];
  var cap = 444;

	this.set = function(name, quantity){
		var index = hash(name, cap);

		if(list[index] === undefined){
			list[index] = [ [name, quantity] ];
		}
	};

	this.get = function(name){
		var index = hash(name, cap);

		if(list[index] === undefined){
    		return "Not found";
  	} else {
    		for(var i = 0; i < list[index].length; i++) {
      		if(list[index][i][0] === name) {
        			return  list[index][i][0] + " - " + list[index][i][1] ;
      		} else {
    				return "Not found";
      		}
    		}
    } 

  };
}

}
Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.
 
function hash(key, size){
var hash = 0;
for(var i = 0; i< key.length;i++){
  hash+= key.charCodeAt(i);
}
return hash % size;
}



function HashTable(){
  var list = [];
  var cap = 9322;
  this.setPub= function(publisher,pubdate){
    var index = hash(publisher, cap)
    if(list[index] === undefined){
      list[index] = [[publisher, pubdate]];   
    }
  }
  this.setDate= function(publisher,pubdate){
    var index = hash(pubdate, cap)
    if(list[index] === undefined){
      list[index] = [[publisher, pubdate]];   
  
  this.getPub = function(publisher) {
    var index = hash(publisher, cap)
    if(list[index]=== undefined){
      return "Not found";
    }
    else{
      for(var i = 0; i <list[index].length;i++){
        if(list[index][i][0]=== publisher){
          return list[index][i][0] + " - "+ list[index][i][1]
         }
        }
      }
    this.getDate = function(pubdate){
      
      var index= hash(pubdate, cap)
      if(list[index]=== undefined){
        return "Not found";
      }
      else{
        for(var i = 0; i <list[index].length;i++){
          if(list[index][i][1] === pubdate){
            return list[index][i][0] + " - "+ list[index][i][1]
           }
          }
        }
    }
  }
  
    }

  






