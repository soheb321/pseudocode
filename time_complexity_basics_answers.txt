1.What is time complexity and what is its relation to algorithms?
The estimated time it would take for a program to run and how it would scale based on (n), algorithms should try to reduce time complexity as much as they can and time complexity 
is a big factor when writing algorithms.

2.What is runtime?
The physical time duration of an algorithm - how long an algorithm takes to run.


3.How is the runtime of an algorithm calculated?
- add how many instructions the algorithm must do - simplify the expression - drop any constants

4.Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n), O(n!)


5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

The more lanes on a highway that are blocked by construction, the growth of cars stuck could be written as O(n^2) 



Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

 O(n)

Determine the time complexity of the following snippet of code.


FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

O(n^2)

Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.


FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

 O(2^n)

Out of the code snippets you just saw, which is the most time efficient?\

The first one. 