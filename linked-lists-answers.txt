1.What are some pros and cons of using linked lists instead of arrays?
Pros of using linked list: 
Easier on memory and less chance of computer to be overwhelmed, do not require consecutive space.
Cons of using linked lists: 
Are not indexed and require a reference. 


Come up with a real world example of a linked list.

Finding items at a grocery store using a grocery list and the signs that hang to find the aisle the next item is in.





Programming Questions
You may program the following questions in any language of your choice (JavaScript, Ruby, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

There is no way for the node to move forward after the first iteration. Need to make a While loop for current.next

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
WHILE there is a current.next 
 SET current to current.next
END WHILE
SET current.next to node
END IF
END FUNCTION





Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d
function linked(){  
  this.head = null;
}

linked.prototype.push =function(data){
var node = {
value: data,
next: null
}

if(!this.head){
      this.head = node;      
    }

else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }

linked.prototype.removeDups = function () {

    var num1;
    var num2;
    var nodes = [];

    num1 = this.head;
    num2 = num1.next;
    nodes[num1.value] = true;

    while (num2) {
        var iter = num2.value;
        if (nodes[iter]) {
            num1.next = num2.next;
        } else {
            nodes[iter] = true;
            num1 = num2;
        }
        num2 = num2.next;
    }
};


var test = new linked();
test.push("a");
test.push("a");
test.push("a");
test.push("a");
test.push("b");
test.push("b");
test.push("b");


test.removeDups();
console.log(test);

Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

function linked(){  
  this.head = null;
}

linked.prototype.push =function(data){
var node = {
value: data,
next: null
}

if(!this.head){
      this.head = node;      
    }

else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }

linked.protype.reverse = function ( data){ 
  var nodes=[], 
    current = data.head;
  while(current){
    nodes.push(current);
    current = current.next;
  }
    
  var reverse = new linked();
  
  reverse.head = nodes.pop();
  current = reverse.head;
  
  var node = nodes.pop();  
  while(node){
     node.next = null;
     current.next = node;
     
     current = current.next;
     node = nodes.pop();
  }
  return reverse;
}

var test = new linked();
test.push("a");
test.push("a");
test.push("a");
test.push("a");
test.push("b");
test.push("b");
test.push("b");


test.reverse(test);
console.log(test);





