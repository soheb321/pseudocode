1. In your own words, explain what clean code is and why it is important.

Clean code helps maintain readability, making it easier to collaborate with others. It not only makes sense logically but it also looks neat and not cluttered. This is especially important for long projects with lots of code being referenced and called all over the place.





2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Though this might or might not have been intentional, Apple firmware updates seem to be extremely taxing on the older iPhone models. This makes the user extremely unhappy with Apple and be more inclined to switch to the competition.




3.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

No because the naming is pretty ambiguous and looks extremely cluttered with no nesting. 

FUNCTION convertDegree(x,y)

  IF y = "F" THEN 
  	SET converted to (x-32) * (5/9) degrees //Fahrenheit to Celsius

  ELSE IF y = "C" THEN 
  	SET converted to x * 1.8000 + 32.00 degrees //Celsius to Fahrenheit
  END IF

  PRINT converted
END FUNCTION




4.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Yes, this code is pretty easy to read and clean.




5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION




FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

FUNCTION getPaymentType (paymentType)
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION



----------------------------------------------------------------------------------------------------------------------------

b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION



FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN 
   IF NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 
      APPEND book to guest.books AND SET book.status to "Checked Out"
      PRINT "Your books have been issued."
   END IF
  END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION



----------------------------------------------------------------------------------------------------------------------------
c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END




CLASS BankAccount

 FUNCTION displayBalance(amount)
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
    PRINT displayBalance
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
       PRINT displayBalance
     END
 END FUNCTION

 FUNCTION creditCardOffer()
  IF (customer.hasCreditCard) THEN
  PRINT displayBalance
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF(customer.hasCheckingAccount) THEN
     PRINT displayBalance
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END
```

----------------------------------------------------------------------------------------------------------------------------
Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.
var arrays = [10, 1, 4, 6, 1, 1, 2];

function squareFind(array) {
  var total = 0;
  for (let i = 0; i <= array.length; i++)   {
    total += array[i];
  }

  if (Math.sqrt(total) % 1 === 0) {
    return Math.sqrt(total);
  } 
  else {
    return total;
  }
}
console.log(squareFind(arrays));







7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function isdupe(array){
  var tempArr = array
  arr.sort(tempArr);
  for(let i =0; i<= array.length; i++){
     if(tempArr[i] === tempArr[i] + 1){
         return true;
        }
     else return false;
        }
}

